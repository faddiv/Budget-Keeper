//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FilterParser.g4 by ANTLR 4.6.4

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace OnlineWallet.Web.QueryLanguage.Parser {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.4")]
[System.CLSCompliant(false)]
public partial class FilterParser : Parser {
	public const int
		AND=1, OR=2, COMPARISON=3, STRING=4, WORD=5, WHITESPACE=6;
	public const int
		RULE_filter = 0, RULE_primary = 1, RULE_andTerm = 2, RULE_orTerm = 3, 
		RULE_comparison = 4, RULE_atomic = 5;
	public static readonly string[] ruleNames = {
		"filter", "primary", "andTerm", "orTerm", "comparison", "atomic"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "AND", "OR", "COMPARISON", "STRING", "WORD", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FilterParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public FilterParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class FilterContext : ParserRuleContext {
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(FilterParser.Eof, 0); }
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFilterParserListener typedListener = listener as IFilterParserListener;
			if (typedListener != null) typedListener.EnterFilter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFilterParserListener typedListener = listener as IFilterParserListener;
			if (typedListener != null) typedListener.ExitFilter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFilterParserVisitor<TResult> typedVisitor = visitor as IFilterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12; primary();
			State = 13; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public AndTermContext[] andTerm() {
			return GetRuleContexts<AndTermContext>();
		}
		public AndTermContext andTerm(int i) {
			return GetRuleContext<AndTermContext>(i);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFilterParserListener typedListener = listener as IFilterParserListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFilterParserListener typedListener = listener as IFilterParserListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFilterParserVisitor<TResult> typedVisitor = visitor as IFilterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_primary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 15; andTerm();
				}
				}
				State = 18;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==STRING || _la==WORD );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndTermContext : ParserRuleContext {
		public OrTermContext[] orTerm() {
			return GetRuleContexts<OrTermContext>();
		}
		public OrTermContext orTerm(int i) {
			return GetRuleContext<OrTermContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(FilterParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(FilterParser.AND, i);
		}
		public AndTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andTerm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFilterParserListener typedListener = listener as IFilterParserListener;
			if (typedListener != null) typedListener.EnterAndTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFilterParserListener typedListener = listener as IFilterParserListener;
			if (typedListener != null) typedListener.ExitAndTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFilterParserVisitor<TResult> typedVisitor = visitor as IFilterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndTermContext andTerm() {
		AndTermContext _localctx = new AndTermContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_andTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20; orTerm();
			State = 25;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AND) {
				{
				{
				State = 21; Match(AND);
				State = 22; orTerm();
				}
				}
				State = 27;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrTermContext : ParserRuleContext {
		public ComparisonContext[] comparison() {
			return GetRuleContexts<ComparisonContext>();
		}
		public ComparisonContext comparison(int i) {
			return GetRuleContext<ComparisonContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(FilterParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(FilterParser.OR, i);
		}
		public OrTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orTerm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFilterParserListener typedListener = listener as IFilterParserListener;
			if (typedListener != null) typedListener.EnterOrTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFilterParserListener typedListener = listener as IFilterParserListener;
			if (typedListener != null) typedListener.ExitOrTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFilterParserVisitor<TResult> typedVisitor = visitor as IFilterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrTermContext orTerm() {
		OrTermContext _localctx = new OrTermContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_orTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28; comparison();
			State = 33;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==OR) {
				{
				{
				State = 29; Match(OR);
				State = 30; comparison();
				}
				}
				State = 35;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		public AtomicContext[] atomic() {
			return GetRuleContexts<AtomicContext>();
		}
		public AtomicContext atomic(int i) {
			return GetRuleContext<AtomicContext>(i);
		}
		public ITerminalNode COMPARISON() { return GetToken(FilterParser.COMPARISON, 0); }
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFilterParserListener typedListener = listener as IFilterParserListener;
			if (typedListener != null) typedListener.EnterComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFilterParserListener typedListener = listener as IFilterParserListener;
			if (typedListener != null) typedListener.ExitComparison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFilterParserVisitor<TResult> typedVisitor = visitor as IFilterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; atomic();
			State = 39;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMPARISON) {
				{
				State = 37; Match(COMPARISON);
				State = 38; atomic();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(FilterParser.STRING, 0); }
		public ITerminalNode WORD() { return GetToken(FilterParser.WORD, 0); }
		public AtomicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomic; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFilterParserListener typedListener = listener as IFilterParserListener;
			if (typedListener != null) typedListener.EnterAtomic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFilterParserListener typedListener = listener as IFilterParserListener;
			if (typedListener != null) typedListener.ExitAtomic(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFilterParserVisitor<TResult> typedVisitor = visitor as IFilterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicContext atomic() {
		AtomicContext _localctx = new AtomicContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_atomic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			_la = _input.La(1);
			if ( !(_la==STRING || _la==WORD) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\b.\x4\x2\t\x2\x4"+
		"\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x3\x2\x3\x2\x3\x2\x3"+
		"\x3\x6\x3\x13\n\x3\r\x3\xE\x3\x14\x3\x4\x3\x4\x3\x4\a\x4\x1A\n\x4\f\x4"+
		"\xE\x4\x1D\v\x4\x3\x5\x3\x5\x3\x5\a\x5\"\n\x5\f\x5\xE\x5%\v\x5\x3\x6\x3"+
		"\x6\x3\x6\x5\x6*\n\x6\x3\a\x3\a\x3\a\x2\x2\x2\b\x2\x2\x4\x2\x6\x2\b\x2"+
		"\n\x2\f\x2\x2\x3\x3\x2\x6\a+\x2\xE\x3\x2\x2\x2\x4\x12\x3\x2\x2\x2\x6\x16"+
		"\x3\x2\x2\x2\b\x1E\x3\x2\x2\x2\n&\x3\x2\x2\x2\f+\x3\x2\x2\x2\xE\xF\x5"+
		"\x4\x3\x2\xF\x10\a\x2\x2\x3\x10\x3\x3\x2\x2\x2\x11\x13\x5\x6\x4\x2\x12"+
		"\x11\x3\x2\x2\x2\x13\x14\x3\x2\x2\x2\x14\x12\x3\x2\x2\x2\x14\x15\x3\x2"+
		"\x2\x2\x15\x5\x3\x2\x2\x2\x16\x1B\x5\b\x5\x2\x17\x18\a\x3\x2\x2\x18\x1A"+
		"\x5\b\x5\x2\x19\x17\x3\x2\x2\x2\x1A\x1D\x3\x2\x2\x2\x1B\x19\x3\x2\x2\x2"+
		"\x1B\x1C\x3\x2\x2\x2\x1C\a\x3\x2\x2\x2\x1D\x1B\x3\x2\x2\x2\x1E#\x5\n\x6"+
		"\x2\x1F \a\x4\x2\x2 \"\x5\n\x6\x2!\x1F\x3\x2\x2\x2\"%\x3\x2\x2\x2#!\x3"+
		"\x2\x2\x2#$\x3\x2\x2\x2$\t\x3\x2\x2\x2%#\x3\x2\x2\x2&)\x5\f\a\x2\'(\a"+
		"\x5\x2\x2(*\x5\f\a\x2)\'\x3\x2\x2\x2)*\x3\x2\x2\x2*\v\x3\x2\x2\x2+,\t"+
		"\x2\x2\x2,\r\x3\x2\x2\x2\x6\x14\x1B#)";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace OnlineWallet.Web.QueryLanguage.Parser
